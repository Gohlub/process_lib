use crate::uqbar::process::standard as wit;
pub use crate::uqbar::process::standard::*;
/// Uqbar process standard library for Rust compiled to WASM
/// Must be used in context of bindings generated by uqbar.wit
use serde::{Deserialize, Serialize};
use std::hash::{Hash, Hasher};

wit_bindgen::generate!({
    path: "wit",
    world: "lib",
});

pub mod kernel_types;
/// Interact with the timer runtime module.
pub mod timer;
/// Interact with the HTTP server and client modules.
pub mod http;

/// Override the println! macro to print to the terminal
#[macro_export]
macro_rules! println {
    () => {
        $crate::print_to_terminal(0, "\n");
    };
    ($($arg:tt)*) => {{
        $crate::print_to_terminal(0, &format!($($arg)*));
    }};
}

/// PackageId is like a ProcessId, but for a package. Only contains the name
/// of the package and the name of the publisher.
#[derive(Hash, Eq, PartialEq, Debug, Clone, Serialize, Deserialize)]
pub struct PackageId {
    package_name: String,
    publisher_node: String,
}

impl PackageId {
    pub fn new(package_name: &str, publisher_node: &str) -> Self {
        PackageId {
            package_name: package_name.into(),
            publisher_node: publisher_node.into(),
        }
    }
    pub fn from_str(input: &str) -> Result<Self, ProcessIdParseError> {
        // split string on colons into 2 segments
        let mut segments = input.split(':');
        let package_name = segments
            .next()
            .ok_or(ProcessIdParseError::MissingField)?
            .to_string();
        let publisher_node = segments
            .next()
            .ok_or(ProcessIdParseError::MissingField)?
            .to_string();
        if segments.next().is_some() {
            return Err(ProcessIdParseError::TooManyColons);
        }
        Ok(PackageId {
            package_name,
            publisher_node,
        })
    }
    pub fn package(&self) -> &str {
        &self.package_name
    }
    pub fn publisher(&self) -> &str {
        &self.publisher_node
    }
}

impl std::fmt::Display for PackageId {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "{}:{}", self.package_name, self.publisher_node)
    }
}

/// ProcessId is defined in the wit bindings, but constructors and methods
/// are defined here.
impl ProcessId {
    /// generates a random u64 number if process_name is not declared
    pub fn new(process_name: Option<&str>, package_name: &str, publisher_node: &str) -> Self {
        ProcessId {
            process_name: process_name
                .unwrap_or(&rand::random::<u64>().to_string())
                .into(),
            package_name: package_name.into(),
            publisher_node: publisher_node.into(),
        }
    }
    pub fn from_str(input: &str) -> Result<Self, ProcessIdParseError> {
        // split string on colons into 3 segments
        let mut segments = input.split(':');
        let process_name = segments
            .next()
            .ok_or(ProcessIdParseError::MissingField)?
            .to_string();
        let package_name = segments
            .next()
            .ok_or(ProcessIdParseError::MissingField)?
            .to_string();
        let publisher_node = segments
            .next()
            .ok_or(ProcessIdParseError::MissingField)?
            .to_string();
        if segments.next().is_some() {
            return Err(ProcessIdParseError::TooManyColons);
        }
        Ok(ProcessId {
            process_name,
            package_name,
            publisher_node,
        })
    }
    pub fn process(&self) -> &str {
        &self.process_name
    }
    pub fn package(&self) -> &str {
        &self.package_name
    }
    pub fn publisher(&self) -> &str {
        &self.publisher_node
    }
}

impl Serialize for ProcessId {
    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
    where
        S: serde::ser::Serializer,
    {
        format!("{}", self).serialize(serializer)
    }
}

impl<'a> Deserialize<'a> for ProcessId {
    fn deserialize<D>(deserializer: D) -> Result<ProcessId, D::Error>
    where
        D: serde::de::Deserializer<'a>,
    {
        let s = String::deserialize(deserializer)?;
        ProcessId::from_str(&s).map_err(serde::de::Error::custom)
    }
}

impl Hash for ProcessId {
    fn hash<H: Hasher>(&self, state: &mut H) {
        self.process_name.hash(state);
        self.package_name.hash(state);
        self.publisher_node.hash(state);
    }
}

impl Eq for ProcessId {}

impl From<(&str, &str, &str)> for ProcessId {
    fn from(input: (&str, &str, &str)) -> Self {
        ProcessId::new(Some(input.0), input.1, input.2)
    }
}

impl std::fmt::Display for ProcessId {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(
            f,
            "{}:{}:{}",
            self.process_name, self.package_name, self.publisher_node
        )
    }
}

impl PartialEq for ProcessId {
    fn eq(&self, other: &Self) -> bool {
        self.process_name == other.process_name
            && self.package_name == other.package_name
            && self.publisher_node == other.publisher_node
    }
}

impl PartialEq<&str> for ProcessId {
    fn eq(&self, other: &&str) -> bool {
        &self.to_string() == other
    }
}

impl PartialEq<ProcessId> for &str {
    fn eq(&self, other: &ProcessId) -> bool {
        self == &other.to_string()
    }
}

#[derive(Debug)]
pub enum ProcessIdParseError {
    TooManyColons,
    MissingField,
}

impl std::fmt::Display for ProcessIdParseError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(
            f,
            "{}",
            match self {
                ProcessIdParseError::TooManyColons => "Too many colons in ProcessId string",
                ProcessIdParseError::MissingField => "Missing field in ProcessId string",
            }
        )
    }
}

impl std::error::Error for ProcessIdParseError {
    fn description(&self) -> &str {
        match self {
            ProcessIdParseError::TooManyColons => "Too many colons in ProcessId string",
            ProcessIdParseError::MissingField => "Missing field in ProcessId string",
        }
    }
}

/// Address is defined in the wit bindings, but constructors and methods here.
impl Address {
    pub fn new<T, U>(node: T, process: U) -> Address
    where
        T: Into<String>,
        U: Into<ProcessId>,
    {
        Address {
            node: node.into(),
            process: process.into(),
        }
    }
    pub fn from_str(input: &str) -> Result<Self, AddressParseError> {
        // split string on colons into 4 segments,
        // first one with @, next 3 with :
        let mut name_rest = input.split('@');
        let node = name_rest
            .next()
            .ok_or(AddressParseError::MissingField)?
            .to_string();
        let mut segments = name_rest
            .next()
            .ok_or(AddressParseError::MissingNodeId)?
            .split(':');
        let process_name = segments
            .next()
            .ok_or(AddressParseError::MissingField)?
            .to_string();
        let package_name = segments
            .next()
            .ok_or(AddressParseError::MissingField)?
            .to_string();
        let publisher_node = segments
            .next()
            .ok_or(AddressParseError::MissingField)?
            .to_string();
        if segments.next().is_some() {
            return Err(AddressParseError::TooManyColons);
        }
        Ok(Address {
            node,
            process: ProcessId {
                process_name,
                package_name,
                publisher_node,
            },
        })
    }
    pub fn en_wit(&self) -> wit::Address {
        wit::Address {
            node: self.node.clone(),
            process: self.process.clone(),
        }
    }
    pub fn de_wit(address: wit::Address) -> Address {
        Address {
            node: address.node,
            process: address.process,
        }
    }
}

impl Serialize for Address {
    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
    where
        S: serde::ser::Serializer,
    {
        format!("{}", self).serialize(serializer)
    }
}

impl<'a> Deserialize<'a> for Address {
    fn deserialize<D>(deserializer: D) -> Result<Address, D::Error>
    where
        D: serde::de::Deserializer<'a>,
    {
        let s = String::deserialize(deserializer)?;
        Address::from_str(&s).map_err(serde::de::Error::custom)
    }
}

impl Hash for Address {
    fn hash<H: Hasher>(&self, state: &mut H) {
        self.node.hash(state);
        self.process.hash(state);
    }
}

impl Eq for Address {}

impl PartialEq for Address {
    fn eq(&self, other: &Self) -> bool {
        self.node == other.node && self.process == other.process
    }
}

impl<T, U, V, W> From<(T, U, V, W)> for Address
where
    T: Into<String>,
    U: Into<&'static str>,
    V: Into<&'static str>,
    W: Into<&'static str>,
{
    fn from(input: (T, U, V, W)) -> Self {
        Address::new(input.0.into(), (input.1.into(), input.2.into(), input.3.into()))
    }
}

impl<T> From<(&str, T)> for Address
where
    T: Into<ProcessId>,
{
    fn from(input: (&str, T)) -> Self {
        Address::new(input.0, input.1)
    }
}

impl std::fmt::Display for Address {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "{}@{}", self.node, self.process)
    }
}

#[derive(Debug)]
pub enum AddressParseError {
    TooManyColons,
    MissingNodeId,
    MissingField,
}

impl std::fmt::Display for AddressParseError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(
            f,
            "{}",
            match self {
                AddressParseError::TooManyColons => "Too many colons in ProcessId string",
                AddressParseError::MissingNodeId => "Node ID missing",
                AddressParseError::MissingField => "Missing field in ProcessId string",
            }
        )
    }
}

impl std::error::Error for AddressParseError {
    fn description(&self) -> &str {
        match self {
            AddressParseError::TooManyColons => "Too many colons in ProcessId string",
            AddressParseError::MissingNodeId => "Node ID missing",
            AddressParseError::MissingField => "Missing field in ProcessId string",
        }
    }
}

//
// Here, we define wrappers over the wit bindings to make them easier to use.
// This library prescribes the use of IPC and metadata types serialized and
// deserialized to JSON, which is far from optimal for performance, but useful
// for applications that want to maximize composability and introspectability.
// For payloads, we use bincode to serialize and deserialize to bytes.
//

pub struct Request {
    target: Option<Address>,
    inherit: bool,
    timeout: Option<u64>,
    ipc: Option<Vec<u8>>,
    metadata: Option<String>,
    payload: Option<Payload>,
    context: Option<Vec<u8>>,
}

impl Request {
    pub fn new() -> Self {
        Request {
            target: None,
            inherit: false,
            timeout: None,
            ipc: None,
            metadata: None,
            payload: None,
            context: None,
        }
    }

    /// Build a request with the Address of the target.
    pub fn to<T>(target: T) -> Self
    where
        T: Into<Address>,
    {
        Request {
            target: Some(target.into()),
            inherit: false,
            timeout: None,
            ipc: None,
            metadata: None,
            payload: None,
            context: None,
        }
    }

    pub fn target<T>(mut self, target: T) -> Self
    where
        T: Into<Address>,
    {
        self.target = Some(target.into());
        self
    }

    pub fn inherit(mut self, inherit: bool) -> Self {
        self.inherit = inherit;
        self
    }

    pub fn expects_response(mut self, timeout: u64) -> Self {
        self.timeout = Some(timeout);
        self
    }

    pub fn ipc<T>(mut self, ipc: T) -> Self
    where
        T: Into<Vec<u8>>,
    {
        self.ipc = Some(ipc.into());
        self
    }

    pub fn try_ipc<T>(mut self, ipc: T) -> anyhow::Result<Self>
    where
        T: TryInto<Vec<u8>, Error = anyhow::Error>,
    {
        self.ipc = Some(ipc.try_into()?);
        Ok(self)
    }

    pub fn metadata(mut self, metadata: &str) -> Self {
        self.metadata = Some(metadata.to_string());
        self
    }

    pub fn payload(mut self, payload: Payload) -> Self {
        self.payload = Some(payload);
        self
    }

    pub fn payload_mime(mut self, mime: &str) -> Self {
        if self.payload.is_none() {
            self.payload = Some(Payload {
                mime: Some(mime.to_string()),
                bytes: vec![],
            });
            self
        } else {
            self.payload = Some(Payload {
                mime: Some(mime.to_string()),
                bytes: self.payload.unwrap().bytes,
            });
            self
        }
    }

    pub fn payload_bytes<T>(mut self, bytes: T) -> Self
    where
        T: Into<Vec<u8>>,
    {
        if self.payload.is_none() {
            self.payload = Some(Payload {
                mime: None,
                bytes: bytes.into(),
            });
            self
        } else {
            self.payload = Some(Payload {
                mime: self.payload.unwrap().mime,
                bytes: bytes.into(),
            });
            self
        }
    }

    pub fn try_payload_bytes<T>(mut self, bytes: T) -> anyhow::Result<Self>
    where
        T: TryInto<Vec<u8>, Error = anyhow::Error>,
    {
        if self.payload.is_none() {
            self.payload = Some(Payload {
                mime: None,
                bytes: bytes.try_into()?,
            });
            Ok(self)
        } else {
            self.payload = Some(Payload {
                mime: self.payload.unwrap().mime,
                bytes: bytes.try_into()?,
            });
            Ok(self)
        }
    }

    pub fn context<T>(mut self, context: T) -> Self
    where
        T: Into<Vec<u8>>,
    {
        self.context = Some(context.into());
        self
    }

    pub fn try_context<T>(mut self, context: T) -> anyhow::Result<Self>
    where
        T: TryInto<Vec<u8>, Error = anyhow::Error>,
    {
        self.context = Some(context.try_into()?);
        Ok(self)
    }

    pub fn send(self) -> anyhow::Result<()> {
        if let (Some(target), Some(ipc)) = (self.target, self.ipc) {
            crate::send_request(
                &target,
                &wit::Request {
                    inherit: self.inherit,
                    expects_response: self.timeout,
                    ipc,
                    metadata: match self.metadata {
                        None => None,
                        Some(str) => Some(str.to_string()),
                    },
                },
                self.context.as_ref(),
                self.payload.as_ref(),
            );
            Ok(())
        } else {
            Err(anyhow::anyhow!("missing fields"))
        }
    }

    pub fn send_and_await_response(
        self,
        timeout: u64,
    ) -> anyhow::Result<Result<(Address, Message), SendError>> {
        if let (Some(target), Some(ipc)) = (self.target, self.ipc) {
            Ok(crate::send_and_await_response(
                &target,
                &wit::Request {
                    inherit: self.inherit,
                    expects_response: Some(timeout),
                    ipc,
                    metadata: self.metadata,
                },
                self.payload.as_ref(),
            ))
        } else {
            Err(anyhow::anyhow!("missing fields"))
        }
    }
}

pub struct Response {
    inherit: bool,
    ipc: Option<Vec<u8>>,
    metadata: Option<String>,
    payload: Option<Payload>,
}

impl Response {
    pub fn new() -> Self {
        Response {
            inherit: false,
            ipc: None,
            metadata: None,
            payload: None,
        }
    }

    pub fn inherit(mut self, inherit: bool) -> Self {
        self.inherit = inherit;
        self
    }

    pub fn ipc<T>(mut self, ipc: T) -> Self
    where
        T: Into<Vec<u8>>,
    {
        self.ipc = Some(ipc.into());
        self
    }

    pub fn try_ipc<T>(mut self, ipc: T) -> anyhow::Result<Self>
    where
        T: TryInto<Vec<u8>, Error = anyhow::Error>,
    {
        self.ipc = Some(ipc.try_into()?);
        Ok(self)
    }

    pub fn metadata(mut self, metadata: &str) -> Self {
        self.metadata = Some(metadata.to_string());
        self
    }

    pub fn payload(mut self, payload: Payload) -> Self {
        self.payload = Some(payload);
        self
    }

    pub fn payload_mime(mut self, mime: &str) -> Self {
        if self.payload.is_none() {
            self.payload = Some(Payload {
                mime: Some(mime.to_string()),
                bytes: vec![],
            });
            self
        } else {
            self.payload = Some(Payload {
                mime: Some(mime.to_string()),
                bytes: self.payload.unwrap().bytes,
            });
            self
        }
    }

    pub fn payload_bytes<T>(mut self, bytes: T) -> Self
    where
        T: Into<Vec<u8>>,
    {
        if self.payload.is_none() {
            self.payload = Some(Payload {
                mime: None,
                bytes: bytes.into(),
            });
            self
        } else {
            self.payload = Some(Payload {
                mime: self.payload.unwrap().mime,
                bytes: bytes.into(),
            });
            self
        }
    }

    pub fn try_payload_bytes<T>(mut self, bytes: T) -> anyhow::Result<Self>
    where
        T: TryInto<Vec<u8>, Error = anyhow::Error>,
    {
        if self.payload.is_none() {
            self.payload = Some(Payload {
                mime: None,
                bytes: bytes.try_into()?,
            });
            Ok(self)
        } else {
            self.payload = Some(Payload {
                mime: self.payload.unwrap().mime,
                bytes: bytes.try_into()?,
            });
            Ok(self)
        }
    }

    pub fn send(self) -> anyhow::Result<()> {
        if let Some(ipc) = self.ipc {
            crate::send_response(
                &wit::Response {
                    inherit: self.inherit,
                    ipc,
                    metadata: self.metadata,
                },
                self.payload.as_ref(),
            );
            Ok(())
        } else {
            Err(anyhow::anyhow!("missing IPC"))
        }
    }
}

pub fn make_payload<T, F>(payload: &T, serializer: F) -> anyhow::Result<Payload>
where
    F: Fn(&T) -> anyhow::Result<Vec<u8>>,
{
    Ok(Payload {
        mime: None,
        bytes: serializer(payload)?,
    })
}

pub fn get_typed_payload<T, F>(deserializer: F) -> Option<T>
where
    F: Fn(&[u8]) -> anyhow::Result<T>,
{
    match crate::get_payload() {
        Some(payload) => match deserializer(&payload.bytes) {
            Ok(thing) => Some(thing),
            Err(_) => None,
        },
        None => None,
    }
}

pub fn get_typed_state<T, F>(deserializer: F) -> Option<T>
where
    F: Fn(&[u8]) -> anyhow::Result<T>,
{
    match crate::get_state() {
        Some(bytes) => match deserializer(&bytes) {
            Ok(thing) => Some(thing),
            Err(_) => None,
        },
        None => None,
    }
}

pub fn grant_messaging<I, T>(our: &Address, grant_to: I)
where
    I: IntoIterator<Item = T>,
    T: Into<ProcessId>,
{
    // the kernel will always give us this capability, so this should never ever fail
    let our_messaging_cap = crate::get_capability(our, &"\"messaging\"".into()).unwrap();
    grant_to.into_iter().for_each(|process| {
        crate::share_capability(&process.into(), &our_messaging_cap);
    });
}

pub fn can_message(address: &Address) -> bool {
    crate::get_capability(address, &"\"messaging\"".into()).is_some()
}

///
/// Here, we define types used by various Uqbar runtime components. Use these
/// to interface directly with the kernel, filesystem, virtual filesystem,
/// and other components -- if you have the capability to do so.
///

#[derive(Serialize, Deserialize, Debug)]
pub enum FsAction {
    Write,
    Replace(u128),
    Append(Option<u128>),
    Read(u128),
    ReadChunk(ReadChunkRequest),
    Delete(u128),
    Length(u128),
    //  process state management
    GetState,
    SetState,
}

#[derive(Serialize, Deserialize, Debug)]
pub struct ReadChunkRequest {
    pub file_uuid: u128,
    pub start: u64,
    pub length: u64,
}
